-------------------------------------
| Inverse Hilbert Matrix Operations |
-------------------------------------

|--------------------------------------------------------------|
|Table of Contents:                                            |
|                                                              |
| 1] Values in H    -- an 8x8 Hilbert Matrix                   |
| 2] Max-norm of H                                             |
| 3] Values in I    -- Inverse of H                            |
| 4] Max-norm of I                                             |
| 5] Condition number of 8x8 Hilbert Matrix (actual)           |
| 6] Values in LL^T -- Factored from H using Choleski's Method |
| 7] Values in X    -- Inverse Matrix Approximation            |
| 8] Difference in max-norms of I and X                        |
| 9] Analysis of effects of Cond. Number on accuracy           |
|10] C function: choleski()                                    |
|11] C function: fwd_sub()                                     |
|12] C function: back_sub()                                    |
|13] C function: max_norm().                                   |
|--------------------------------------------------------------|

[1]---Creating Hilbert Matrix H-------------------------------------------|
| 1.000000 0.500000 0.333333 0.250000 0.200000 0.166667 0.142857 0.125000 |
| 0.500000 0.333333 0.250000 0.200000 0.166667 0.142857 0.125000 0.111111 |
| 0.333333 0.250000 0.200000 0.166667 0.142857 0.125000 0.111111 0.100000 |
| 0.250000 0.200000 0.166667 0.142857 0.125000 0.111111 0.100000 0.090909 |
| 0.200000 0.166667 0.142857 0.125000 0.111111 0.100000 0.090909 0.083333 |
| 0.166667 0.142857 0.125000 0.111111 0.100000 0.090909 0.083333 0.076923 |
| 0.142857 0.125000 0.111111 0.100000 0.090909 0.083333 0.076923 0.071429 |
| 0.125000 0.111111 0.100000 0.090909 0.083333 0.076923 0.071429 0.066667 |
|--------------------------------------------------------------------------

[2]--------------------------|
| H has Max Norm of 2.717857 |
|----------------------------|

[3]---Computing Inverse Hilbert Matrix I-------------------------------------------------------------------------------------------------------------------------------------------|
|         64.000000       -2016.000000         40320.000000        -554400.000000         5322240.000000        -34594560.000000         138378240.000000        -259459200.000000 |
|      -2016.000000       84672.000000      -1905120.000000       27941760.000000      -279417600.000000       1868106240.000000       -7628100480.000000       14529715200.000000 |
|      40320.000000    -1905120.000000      45722880.000000     -698544000.000000      7185024000.000000     -49037788800.000000      203416012800.000000     -392302310400.000000 |
|    -554400.000000    27941760.000000    -698544000.000000    10977120000.000000   -115259760000.000000     799134336000.000000    -3356364211200.000000     6538371840000.000000 |
|    5322240.000000  -279417600.000000    7185024000.000000  -115259760000.000000   1229437440000.000000   -8630650828800.000000    36614882304000.000000   -71922090240000.000000 |
|  -34594560.000000  1868106240.000000  -49037788800.000000   799134336000.000000  -8630650828800.000000   61199160422400.000000  -261796408473600.000000   517839049728000.000000 |
|  138378240.000000 -7628100480.000000  203416012800.000000 -3356364211200.000000  36614882304000.000000 -261796408473600.000000  1127738374963200.000000 -2243969215488000.000000 |
| -259459200.000000 14529715200.000000 -392302310400.000000  6538371840000.000000 -71922090240000.000000  517839049728000.000000 -2243969215488000.000000  4487938430976000.000000 |
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|

[4]-----------------------------------------|
| I has Max Norm of 7328614249756800.000000 |
[5]-----------------------------------------+-------|
| Condition number of H8:  19918126585946156.000000 |
|---------------------------------------------------|

[6]---Computing Choleski Factorization of H, LL^T-------------------------|
| 1.000000 0.500000 0.333333 0.250000 0.200000 0.166667 0.142857 0.125000 |
| 0.500000 0.288675 0.288675 0.259808 0.230940 0.206197 0.185577 0.168394 |
| 0.333333 0.288675 0.074536 0.111803 0.127775 0.133099 0.133099 0.130437 |
| 0.250000 0.259808 0.111803 0.018898 0.037796 0.052495 0.062994 0.070152 |
| 0.200000 0.230940 0.127775 0.037796 0.004762 0.011905 0.019481 0.026515 |
| 0.166667 0.206197 0.133099 0.052495 0.011905 0.001196 0.003589 0.006765 |
| 0.142857 0.185577 0.133099 0.062994 0.019481 0.003589 0.000300 0.001051 |
| 0.125000 0.168394 0.130437 0.070152 0.026515 0.006765 0.001051 0.000075 |
|-------------------------------------------------------------------------|

[7]---Calculated X from LL^T---------------------------------------------------------------------------------------------------------------------|
|      64.000000     -2016.000007      20160.000058     -92400.000180      221760.000198     -288287.999949      192191.999767     -51479.999887 |
|   -2016.000007     84672.000190    -952560.000762    4656959.996924   -11642399.976249    15567551.948488   -10594583.952716    2882879.984119 |
|   20160.000058   -952560.000762   11430719.987349  -58211999.836982   149687999.357928  -204324118.856360   141261119.046604  -38918879.697658 |
|  -92400.000180   4656959.996924  -58211999.836981  304919998.603855  -800414995.137009  1109908791.841327  -776936153.435734  216215997.966740 |
|  221760.000198 -11642399.976248  149687999.357924 -800414995.137007  2134439983.925142 -2996753733.803816  2118916779.309976 -594593993.673109 |
| -288287.999949  15567551.948487 -204324118.856359 1109908791.841330 -2996753733.803817  4249941654.038170 -3030050991.233472  856215350.061030 |
|  192191.999767 -10594583.952716  141261119.046602 -776936153.435734  2118916779.309974 -3030050991.233472  2175421222.610552 -618377752.341566 |
|  -51479.999887   2882879.984119  -38918879.697658  216215997.966741  -594593993.673109   856215350.061030  -618377752.341566  176679357.699333 |
|------------------------------------------------------------------------------------------------------------------------------------------------|

[8]-------------------------------------------|
| Difference in Norm: 7328611745821109.000000 |
|---------------------------------------------|

[9]----------------------------------------------------------------------------------------------|
| A large condition number clearly has a major effect on the final answer.                       |
| This is hugely noticeable in the difference in magnitude of our largest values.                |
| Even lower values were non-trivially inaccurate in value.                                      |
| This indicates that we should be exceedingly aware of the condition number when approximating. |
|------------------------------------------------------------------------------------------------|

[10]-----------------------------------------------------
void choleski(double **A, double **L, const size_t n){
  for(size_t i = 0; i < n; i++){
    for(size_t j = 0; j <= i; j++){
      double s = A[i][j];
      for(size_t k = 0; k < j; k++){
        s -= L[j][k]*L[i][k];
      }
      if(j<i) L[i][j] = L[j][i] = s/L[j][j];
      else L[i][j] = sqrt(s);
    }
  }
}

[11]-----------------------------------------------------
void fwd_sub(double **L, double *b, size_t n, double *y){
  for(size_t i = 0; i < n; i++){
    y[i] = b[i];
    for(size_t j = 0; j < i; j++){
      y[i] -= L[i][j]*y[j];
    } y[i] /= L[i][i];
  }
}

[12]-----------------------------------------------------
void back_sub(double **U, double *y, size_t n, double *x){
  for(int i = (n-1); i >= 0; i--){
    x[i] = y[i];
    for(int j = i+1; j < n; j++){
      x[i] -= U[i][j]*x[j];
    } x[i] /= U[i][i];
  }
}

[13]-----------------------------------------------------
double max_norm(double **H, size_t n){
  double m = 0;
  for(size_t i = 0; i < n; i++){
    double ar = 0;
    for(size_t j = 0; j < n; j++){
      ar += fabs(H[i][j]);
    } m = fmax(m, ar);
  } return m;
}
